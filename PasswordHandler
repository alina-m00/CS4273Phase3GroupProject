#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/*
Password Requirements:

- 8+ character length
- must contain upper and lowercase letters
- must contain a number
- may contain non-alphanumeric characters
*/

int main()
{
    // Variables for our code, char[] holds the user inputs, others act as counters/flags
    char username[100];
    char password[100];
    char confirm[100];
    int upper;
    int lower;
    int number;
    int special;
    bool match = true;

    // Get the user's username
    printf("Please input your username: ");
    fgets(username, sizeof(username), stdin);
    printf("\n");
    
    // Rules of the password that user must follow
    printf("Hello, %sPlease enter a password. \n", username);
    printf("Here are the requirements: \n");
    printf("-Must be at least 8 characters \n");
    printf("-Must contain both upper and lower case letters \n");
    printf("-Must contain a number \n");
    printf("-Must contain a special character \n");
    printf("-NOTE: Spaces will be replaced with an underscore (_) \n \n");
    
    // Keep looping until user gives a valid password and confirms it
    while(true) {
        printf("Password: ");
        // This accepts all inputs, spaces included
        fgets(password, sizeof(password), stdin);
        printf("\n");

        // These track the character types, also resets the counts each time it loops
        upper = 0;
        lower = 0;
        number = 0;
        special = 0;
        
        // Loop through every character, -1 removes empty space at the end
        for(int i = 0; i < strlen(password) - 1; i++) {
            // Check what the char falls under, increase that count accordingly
            if(isupper(password[i])) upper++;
            else if(islower(password[i])) lower++;
            else if(isdigit(password[i])) number++;
            else if(isspace(password[i])) {
                // Change ' ' to '_', also increase the special count
                password[i] = '_';
                special++;
            }
            else special++;
        }
        
        // Check if any criteria fails, tell the user, and return back to the start
        if(upper == 0 || lower == 0 || number == 0 || special == 0 || strlen(password) < 8) {
            // Only print out the failed criteria
            printf("Your password is missing the following: \n");
            if(upper == 0) printf("-missing uppercase letter  \n");
            if(lower == 0) printf("-missing lowercase letter  \n");
            if(number == 0) printf("-missing number  \n");
            if(special == 0) printf("-missing special character  \n");
            if(strlen(password) < 8) printf("-password is too short  \n");
            printf("Please choose a valid password. \n \n");
        }
        // Valid password found, check for a match before confirming it
        else {
            // Have the user re-enter their password
            printf("Please re-enter your password: ");
            fgets(confirm, sizeof(confirm), stdin);
            // Check if the lengths match before trying to loop through the checks
            if(strlen(confirm) != strlen(password)) {
                // If it fails, have the user enter their password again
                printf("Passwords do not match. Please choose a valid password. \n \n");
            }
            else {
                // If lengths match, see if any characters do not match
                for(int j = 0; j < strlen(confirm) - 1; j++) {
                    // Convert ' ' to '_' to avoid any matching issues
                    if(confirm[j] == ' ') confirm[j] = '_';
                    // Throw the flag if anything does not match
                    if(confirm[j] != password[j]) match = false;
                }
                // Allow the password to be set if they match
                if(match) {
                    printf("Your password is set! \n");
                    // Exit from the while loop once the password is set
                    break;
                }
                else {
                    // If it fails, have the user enter their password again
                    printf("Passwords do not match. Please choose a valid password. \n \n");
                    match = true;
                }
            }
        }
    }
    return 0;
}
